@model HelpDeskTeamProject.DataModels.Ticket
@using HelpDeskTeamProject.DataModels
@{
    string[] statusColorsArray = { StatusColors.orangered.ToString(),
        StatusColors.darkorange.ToString(),
        StatusColors.limegreen.ToString(),
        StatusColors.dimgrey.ToString() };

    string[] ticketStateNames = { TicketState.New.ToString(), TicketState.InProgress.ToString(),
        TicketState.Done.ToString(), TicketState.Rejected.ToString() };
}

<link rel="stylesheet" href="~/Content/MaterialStyles.css" type="text/css">

<script>
    function addTicket() {
        var textBox = document.getElementById("addTicketText");
        var typeChoser = document.getElementById("addTicketType");
        if (textBox.value == "") {
            textBox.style.border = "groove";
            textBox.style.borderColor = "orangered";
            textBox.style.borderWidth = "1.5px";
        }
        if (typeChoser.value == 0) {
            typeChoser.style.border = "groove";
            typeChoser.style.borderColor = "orangered";
            typeChoser.style.borderWidth = "1.5px";
        }
        if (textBox.value != "" && typeChoser.value != 0) {
            textBox.style.border = "";
            textBox.style.borderColor = "";
            textBox.style.borderWidth = "";
            typeChoser.style.border = "";
            typeChoser.style.borderColor = "";
            typeChoser.style.borderWidth = "";
            uploadTicket(textBox.value, typeChoser.value);
        }
    }

    function uploadTicket(text,type) {
        var uploaderUrl = "/Ticket/AddTicket";
        var formData = new FormData();
        formData.append("Description", text);
        formData.append("TypeId", type);
        formData.append("BaseTicketId", @Model.Id);
        formData.append("BaseTeamId",@Model.TeamId);
        var xhr = new XMLHttpRequest();
        xhr.open('POST', uploaderUrl, true);
        xhr.onloadend = function () {
            var parsedTicket = JSON.parse(xhr.responseText);
            if (parsedTicket != null) {
                displayNewTicket(parsedTicket);
            }
        }
        xhr.send(formData);
    }

    function displayNewTicket(ticket) {
        var statusNames = @Html.Raw(Json.Encode(ticketStateNames));
        var statusColorsJs = @Html.Raw(Json.Encode(statusColorsArray));
        var ticketsDisplay = document.getElementById("ticketsDisplay");
        var curTicketChildsCount = document.getElementById("ticketChildsCount");
        curTicketChildsCount.innerText = " " + (parseInt(curTicketChildsCount.innerText) + 1);

        var cardDiv = document.createElement("div");
        cardDiv.className = "card";
        ticketsDisplay.appendChild(cardDiv);

        var statusRectDiv = document.createElement("div");
        statusRectDiv.className = "statusRect";
        statusRectDiv.style.backgroundColor = statusColorsJs[ticket.State];
        cardDiv.appendChild(statusRectDiv);

        var userNameDisp = document.createElement("h5");
        userNameDisp.className = "headerMargin";
        userNameDisp.innerHTML = "<b>" + ticket.User.Name + "</b> <b>" + ticket.User.Surname + "</b>"
        cardDiv.appendChild(userNameDisp);

        var timeDisp = document.createElement("h5");
        timeDisp.className = "dateTime";
        timeDisp.innerText = ticket.TimeCreated;
        cardDiv.appendChild(timeDisp);

        var statusDisp = document.createElement("h5");
        statusDisp.className = "dateTime";
        statusDisp.style.color = statusColorsJs[ticket.State];
        statusDisp.innerHTML = "<b>" + statusNames[ticket.State] + "</b>"
        cardDiv.appendChild(statusDisp);

        var deleteButton = document.createElement("h5");
        deleteButton.className = "deleteButton";
        deleteButton.innerText = "Delete";
        cardDiv.appendChild(deleteButton);

        var cardText = document.createElement("div");
        cardText.className = "cardText";
        var ticketDescr = document.createElement("p");
        ticketDescr.innerText = ticket.Description;
        cardText.appendChild(ticketDescr);
        var themeText = document.createElement("div");
        themeText.className = "themeText";
        themeText.innerText = ticket.Type.Name;
        cardText.appendChild(themeText);
        cardDiv.appendChild(cardText);

        var divideLine = document.createElement("div");
        divideLine.className = "divideLine";
        cardDiv.appendChild(divideLine);

        var replyRect = document.createElement("div");
        replyRect.className = "replyRectangle";
        var showTicketText = document.createElement("div");
        showTicketText.className = "replyTextMargin";
        showTicketText.innerText = "Show";
        replyRect.appendChild(showTicketText);
        var editTicketText = document.createElement("div");
        editTicketText.className = "replyTextMargin";
        editTicketText.innerText = "Edit";
        replyRect.appendChild(editTicketText);
        var commentsTicketDisp = document.createElement("div");
        commentsTicketDisp.className = "replyTextMargin";
        commentsTicketDisp.innerHTML = "<img src=\"/Content/comments.png\" style=\"padding-bottom:1px;\" /><b> " + ticket.CommentsCount +"</b>"
        replyRect.appendChild(commentsTicketDisp);
        var childTicketDisp = document.createElement("div");
        childTicketDisp.className = "replyTextMargin";
        childTicketDisp.innerHTML = "<img src=\"/Content/ticket.png\" style=\"padding-bottom:1px;\" /><b> " + ticket.ChildTicketsCount + "</b>"
        replyRect.appendChild(childTicketDisp);
        cardDiv.appendChild(replyRect);
    }

    function addComment() {
        var commentBox = document.getElementById("addCommentText");
        if (commentBox.value == "") {
            commentBox.style.border = "groove";
            commentBox.style.borderColor = "orangered";
            commentBox.style.borderWidth = "1.5px";
        }
        else {
            commentBox.style.border = "";
            commentBox.style.borderColor = "";
            commentBox.style.borderWidth = "";
            uploadComment(commentBox.value);
        }
    }

    function uploadComment(text) {
        var uploaderUrl = "/Ticket/AddComment";
        var formData = new FormData();
        formData.append("ticketId", @Model.Id);
        formData.append("text", text);
        var xhr = new XMLHttpRequest();
        xhr.open('POST', uploaderUrl, true);
        xhr.onloadend = function () {
            var parsedCom = JSON.parse(xhr.responseText);
            if (parsedCom != null) {
                displayNewComment(parsedCom);
            }
        }
        xhr.send(formData);
    }

    function displayNewComment(comment) {
        var mainDisp = document.getElementById("mainDisplay");
        var curTicketCommentsCount = document.getElementById("ticketCommentsCount");
        curTicketCommentsCount.innerText = " " + (parseInt(curTicketCommentsCount.innerText) + 1);

        var cardDiv = document.createElement("div");
        cardDiv.className = "card";
        mainDisp.appendChild(cardDiv);

        var userNameDisp = document.createElement("h5");
        userNameDisp.className = "headerMargin";
        userNameDisp.innerHTML = "<b>" + comment.User.Name + "</b> <b>" + comment.User.Surname + "</b>"
        cardDiv.appendChild(userNameDisp);

        var timeDisp = document.createElement("h5");
        timeDisp.className = "dateTime";
        timeDisp.innerText = comment.TimeCreated;
        cardDiv.appendChild(timeDisp);

        var deleteButton = document.createElement("h5");
        deleteButton.className = "deleteButton";
        deleteButton.innerText = "Delete";
        cardDiv.appendChild(deleteButton);

        var comText = document.createElement("div");
        comText.className = "commentText";
        var comPar = document.createElement("p");
        comPar.innerText = comment.Text;
        comText.appendChild(comPar);
        cardDiv.appendChild(comText);
    }
</script>

<h2>Show Ticket</h2>

<div>
    <div class="pageDivideLeft" id="mainDisplay">
        <div class="card">
            <div class="statusRect" style="background-color: @statusColorsArray[(int)Model.State];"></div>
            <h5 class="headerMargin"><b>@Model.User.Name</b> <b>@Model.User.Surname</b></h5>
            <h5 class="dateTime">@Model.TimeCreated.ToString()</h5>
            <h5 class="dateTime" style="color:@statusColorsArray[(int)Model.State];"><b>@Model.State.ToString()</b></h5>
            <h5 class="deleteButton">Delete</h5>
            <div class="cardText">
                <p>@Model.Description</p>
                <div class="themeText">@Model.Type.Name</div>
            </div>
            <div class="divideLine"></div>
            <div class="replyRectangle">
                <div class="replyTextMargin">Reply</div>
                <div class="replyTextMargin">Edit</div>
                <div class="replyTextMargin"><img src="~/Content/comments.png" style="padding-bottom:1px;" /><b id="ticketCommentsCount"> @Model.Comments.Count</b></div>
                <div class="replyTextMargin"><img src="~/Content/ticket.png" style="padding-bottom:1px;" /><b id="ticketChildsCount"> @Model.ChildTickets.Count</b></div>
            </div>
        </div>
        <div class="card">
            <h5 class="headerMargin"><b>Add New Comment</b></h5>
            <div class="inputTicketDiv">
                <textarea id="addCommentText" class="inputTicketText" style="height: 55px;" placeholder="Write here your comment..."></textarea>
            </div>
            <div style="padding-bottom: 15px; padding-right: 15px; padding-left: 15px;">
                <div class="addButtonDiv" style="width: 100%;" onclick="addComment();">
                    <p style="padding-top: 1px;">Add</p>
                </div>
            </div>
        </div>
        @if (Model.Comments.Count > 0)
        {
            foreach (var comment in Model.Comments)
            {
                <div class="card">
                <h5 class="headerMargin"><b>@comment.User.Name</b> <b>@comment.User.Surname</b></h5>
                <h5 class="dateTime">@comment.TimeCreated.ToString()</h5>
                <h5 class="deleteButton">Delete</h5>
                    <div class="commentText">
                        <p>@comment.Text</p>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="card">
                <div class="systemMessageText">
                    This ticket does not have any comments, try adding more by clicking reply button.
                </div>
            </div>
        }

    </div>
    <div class="pageDivideRight" id="ticketsDisplay">
        <div class="card">
            <h5 class="headerMargin"><b>Add New Ticket</b></h5>
            <div class="inputTicketDiv">
                <textarea id="addTicketText" class="inputTicketText" placeholder="Write here your problem or suggestion..."></textarea>
            </div>
            <div style="padding-bottom: 15px; padding-right: 15px; padding-left: 15px;">
                <div class="selectType">
                    <select id="addTicketType" style="width:100%; min-width:100%; height: 20px; transition: 0.3s;">
                        <option value="0">Select type</option>
                        @for (int counter = 0;counter < ViewBag.TicketTypes.Count; counter++)
                        {
                            <option value="@(counter + 1)">@ViewBag.TicketTypes[counter].Name</option>
                        }
                    </select>
                </div>
                <div class="addButtonDiv" onclick="addTicket();">
                    <p style="padding-top: 1px;">Add</p>
                </div>
            </div>
        </div>
        @if (Model.ChildTickets.Count > 0)
        {
            foreach (var childTicket in Model.ChildTickets)
            {
                <div class="card">
                    <div class="statusRect" style="background-color: @statusColorsArray[(int)childTicket.State]"></div>
                    <h5 class="headerMargin"><b>@childTicket.User.Name</b> <b>@childTicket.User.Surname</b></h5>
                    <h5 class="dateTime">@childTicket.TimeCreated.ToString()</h5>
                    <h5 class="dateTime" style="color:@statusColorsArray[(int)childTicket.State];"><b>@childTicket.State.ToString()</b></h5>
                    <h5 class="deleteButton">Delete</h5>
                    <div class="cardText">
                        <p>@childTicket.Description</p>
                        <div class="themeText">@childTicket.Type.Name</div>
                    </div>
                    <div class="divideLine"></div>
                    <div class="replyRectangle">
                        <div class="replyTextMargin">Show</div>
                        <div class="replyTextMargin">Edit</div>
                        <div class="replyTextMargin"><img src="~/Content/comments.png" style="padding-bottom:1px;" /><b> @childTicket.Comments.Count</b></div>
                        <div class="replyTextMargin"><img src="~/Content/ticket.png" style="padding-bottom:1px;" /><b> @childTicket.ChildTickets.Count</b></div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="card">
                    <div class="systemMessageText">
                        This ticket does not have any child tickets, try adding more by clicking add button.
                    </div>
            </div>
        }
    </div>
</div>


